options:
  parameters:
    author: Scott Hollas
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: car_freq_record
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: read_car_open
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: freq
  id: variable
  parameters:
    comment: ''
    value: 434.4e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 12.0]
    rotation: 0
    state: true
- name: high_cutoff
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: High Cutoff
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: 100e3
    step: '100'
    stop: 500e3
    value: '228300'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 572.0]
    rotation: 0
    state: true
- name: low_cutoff
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Low Cutoff
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: '100'
    step: '100'
    stop: 10e3
    value: '300'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 572.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 2e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12.0]
    rotation: 0
    state: enabled
- name: trans_width
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: TransitionWidth
    min_len: '200'
    orient: Qt.Horizontal
    rangeType: float
    start: 1e3
    step: '100'
    stop: 500e3
    value: 1e3
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 572.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: Filter out the jamming signals
    decim: '1'
    gain: '1'
    high_cutoff_freq: high_cutoff
    interp: '1'
    low_cutoff_freq: low_cutoff
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: trans_width
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 172.0]
    rotation: 0
    state: enabled
- name: band_pass_filter_0_0
  id: band_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: Filter out the jamming signals
    decim: '1'
    gain: '1'
    high_cutoff_freq: high_cutoff
    interp: '1'
    low_cutoff_freq: low_cutoff
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: trans_width
    win: firdes.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [408, 404.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_float_0
  id: blocks_complex_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [456, 216.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '2000000'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 460.0]
    rotation: 0
    state: enabled
- name: blocks_interleaved_char_to_complex_0
  id: blocks_interleaved_char_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vector_input: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [776, 212.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 464.0]
    rotation: 0
    state: enabled
- name: blocks_null_sink_1
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1000, 280.0]
    rotation: 0
    state: enabled
- name: blocks_peak_detector_xb_1
  id: blocks_peak_detector_xb
  parameters:
    affinity: ''
    alias: ''
    alpha: '0.001'
    comment: ''
    look_ahead: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    threshold_factor_fall: '0.01'
    threshold_factor_rise: '0.01'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 188.0]
    rotation: 0
    state: enabled
- name: blocks_throttle_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 20.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_0
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [968, 212.0]
    rotation: 0
    state: true
- name: blocks_throttle_0_1
  id: blocks_throttle
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 100.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio import blocks\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Record Signal when peak detected',   # will show\
      \ up in GRC\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n    def work(self, input_items, output_items):\n        try:\n\
      \            with open('tmp_recording', 'r') as f:\n                f=f.read()\n\
      \                with open('tmp_signal', 'r+') as f2:\n                    f_read=f2.read()\n\
      \                    if '0' in f_read:\n                     #   file = 'signal_1'\n\
      \                        f = np.fromfile(open(\"signal_1\"), dtype=np.complex64)\n\
      \                        f=np.append(f,input_items[0]) #Append to array \n \
      \                       f.astype(np.complex64).tofile(\"signal_1\") #Save the\
      \ new array\n                    if '1' in f_read: #Start recording the second\
      \ signal\n                        f = np.fromfile(open(\"signal_2\"), dtype=np.complex64)\n\
      \                        f=np.append(f,input_items[0]) #Append to array \n \
      \                       f.astype(np.complex64).tofile(\"signal_2\") #Save the\
      \ new array\n\n                        #output_items[0][:] = 12345.123\n   \
      \                     f2.seek(0)\n                        f2.write('3')\n  \
      \                      #Record to signal 1\n                #if '1' in f:\n\
      \                 #   output_items[0][:] = input_items[0]\n\n        except\
      \ Exception as e:\n            print(e)\n        return len(output_items[0])\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Record Signal when peak detected', 'blk', [], [('0', 'complex', 1)],
      [('0', 'complex', 1)], 'Embedded Python Block example - a simple multiply const',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 464.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport os\nimport numpy\
      \ as np\nfrom gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base\
      \ classes are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python\
      \ Block example - a simple multiply const\"\"\"\n\n    def __init__(self): \
      \ # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='Manage the peaking signal',   # will show up in\
      \ GRC\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n    def work(self, input_items, output_items):\n        try:\n\
      \            input_string = np.array2string(input_items[0]) #convert array to\
      \ string\n            if '1' in input_string:\n                with open('tmp_start',\
      \ 'r+') as s:\n                    if s.read() == '0':\n                   \
      \     s.seek(0)  \n                        s.write('1')\n                #Start\
      \ recording if not already\n                with open('tmp_recording', 'w')\
      \ as f:\n                    f.write('1')\n            else: #The signal isn't\
      \ peaking\n                #First check if the recording started\n         \
      \       with open('tmp_start', 'r+') as s2:\n                    if '0' in s2.read():\n\
      \                        return len(output_items[0])\n                #Check\
      \ if a counter has started already\n                with open('tmp_counter',\
      \ 'r+') as f2:\n                    counter=f2.read() #Read the file\n     \
      \               if int(counter) == 1000: #Check if the counter has reached 50\n\
      \                        counter=0\n                        f2.seek(0)\n   \
      \                     f2.write('0') #Reset the counter\n                   \
      \     with open('tmp_recording', 'w') as w1: #Stop the recording file\n    \
      \                        w1.write('0') #Stop recording\n                   \
      \         with open('tmp_signal', 'r+') as s1: #Open signal file\n         \
      \                       if s1.read() == '0': #This is the first signal\n   \
      \                                 s1.seek(0)  \n                           \
      \         s1.write('1') #Start second recording\n                          \
      \          print('First Recording Complete')\n                             \
      \       #Reset start back to 0\n                                    with open('tmp_start',\
      \ 'w') as s3: #Resets the start back to 0, so the recording will start when\
      \ the next peak is detected\n                                        s3.seek(0)\n\
      \                                        s3.write('0')\n                   \
      \             else: #Both signals have been captured\n                     \
      \               print('Both Recordings Complete') #stop listening and jamming\
      \ and replay first signal, make led green?\n                               \
      \     s1.seek(0)\n                                    s1.write('2') #Stop the\
      \ writing to file\n                                    #Stop jamming\n     \
      \                               try:\n                                     \
      \   os.system('nmcli con down id \"ESPap 1\"')\n                           \
      \         except:\n                                        print(\"ESPap was\
      \ not connected\")\n                                    #Run the splitting file\n\
      \                                    #import subprocess\n                  \
      \                  #exec(open(\"/home/scott/Documents/GNURadio/CAR/split_files.py\"\
      ).read())\n                                    #exec(open(\"/home/scott/Documents/GNURadio/CAR/transmit_signal.py\"\
      ).read())\n                                    #subprocess.call('/home/scott/Documents/GNURadio/CAR/split_files.py',shell=True)\n\
      \                                    #subprocess.call('/home/scott/Documents/GNURadio/CAR/transmit_signal.py',\
      \ shell=True)\n\n                                    '''\n                 \
      \                   #Turn off amber led\n                                  \
      \  LED_PIN = 17\n                                    GPIO.setmode(GPIO.BCM)\n\
      \                                    GPIO.output(LED_PIN, GPIO.LOW)\n      \
      \                              #Light Up Green Led\n                       \
      \             LED_PIN = 17\n                                    GPIO.setup(LED_PIN,\
      \ GPIO.OUT)\n                                    GPIO.output(LED_PIN, GPIO.HIGH)\n\
      \                                    time.sleep(1)\n                       \
      \             GPIO.output(LED_PIN, GPIO.LOW)\n                             \
      \       GPIO.cleanup()\n                                    '''\n\n        \
      \            if int(counter) != 0: #The counter has started already\n      \
      \                  counter= int(counter)+1 #add one ot the counter\n       \
      \                 f2.seek(0)\n                        f2.write(str(counter))\
      \ #Write the incremented value ot the file\n                    else: #If the\
      \ counter hasn't started\n                        with open('tmp_counter', 'w')\
      \ as f3: #Open the file for write\n                            f3.write('1')\
      \ #Begin the count\n\n        except Exception as e: \n            print(e)\n\
      \        #output_items[0][:] = output\n        \n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Manage the peaking signal', 'blk', [], [('0', 'complex', 1)], [('0',
      'complex', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 280.0]
    rotation: 0
    state: enabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: '""'
    bb_gain0: '0'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: 100e3
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '10'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '0'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: gpsdo
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 244.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: 100e3
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: freq
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_FLATTOP
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 4.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: 100e3
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: freq
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: firdes.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 84.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [952, 4.0]
    rotation: 0
    state: enabled
- name: snippet_0
  id: snippet
  parameters:
    alias: ''
    code: "import os\n\nwith open('tmp_recording', 'w') as f:\n\tf.write('0')\nwith\
      \ open('tmp_counter', 'w') as f:\n\tf.write('0')\nwith open('tmp_signal', 'w')\
      \ as f:\n\tf.write('0')\nwith open('tmp_start', 'w') as f:\n\tf.write('0')\n\
      with open('signal_1', 'w') as f:\n\tf.write('')\nwith open('signal_2', 'w')\
      \ as f:\n\tf.write('')\n\n\nos.system('nmcli dev wifi connect ESPap')  #Start\
      \ jamming by connecting to wifi network"
    comment: 'Resets all tmp files back to 0

      Connects to signal jammer wifi'
    priority: ''
    section: main_after_init
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 148.0]
    rotation: 0
    state: enabled
- name: snippet_0_0
  id: snippet
  parameters:
    alias: ''
    code: 'import os

      os.system(''nmcli con down id "ESPap 1"'')'
    comment: Disconnects from wifi
    priority: ''
    section: main_after_stop
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 484.0]
    rotation: 0
    state: enabled

connections:
- [band_pass_filter_0, '0', blocks_complex_to_float_0, '0']
- [band_pass_filter_0, '0', blocks_throttle_0, '0']
- [band_pass_filter_0_0, '0', epy_block_0, '0']
- [blocks_complex_to_float_0, '0', blocks_peak_detector_xb_1, '0']
- [blocks_delay_0, '0', band_pass_filter_0_0, '0']
- [blocks_interleaved_char_to_complex_0, '0', blocks_throttle_0_0, '0']
- [blocks_interleaved_char_to_complex_0, '0', epy_block_3, '0']
- [blocks_peak_detector_xb_1, '0', blocks_interleaved_char_to_complex_0, '0']
- [blocks_throttle_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_throttle_0_0, '0', qtgui_time_sink_x_1_0, '0']
- [blocks_throttle_0_1, '0', qtgui_freq_sink_x_0_0, '0']
- [epy_block_0, '0', blocks_null_sink_0, '0']
- [epy_block_3, '0', blocks_null_sink_1, '0']
- [osmosdr_source_0, '0', band_pass_filter_0, '0']
- [osmosdr_source_0, '0', blocks_delay_0, '0']
- [osmosdr_source_0, '0', blocks_throttle_0_1, '0']

metadata:
  file_format: 1
